import React, { useEffect, useRef, useState } from 'react';
import { motion } from 'framer-motion';

const INDIC_CHAR_SET: string[] = [
  'अ','आ','इ','ई','उ','ऊ','ए','ऐ','ओ','औ','क','ख','ग','घ','च','छ','ज','झ','ट','ठ','ड','ढ','त','थ','द','ध','न','प','फ','ब','भ','म','य','र','ल','व','श','ष','स','ह','।','ऽ',
  'অ','আ','ই','ঈ','উ','ঊ','এ','ঐ','ও','ঔ','ক','খ','গ','ঘ','চ','ছ','জ','ঝ','ট','ঠ','ড','ঢ','ত','থ','দ','ধ','ন','প','ফ','ব','ভ','ম','য','র','ল','শ','ষ','স','হ','ঃ','ঁ',
  'અ','આ','ઇ','ઈ','ઉ','ઊ','એ','ઐ','ઓ','ઔ','ક','ખ','ગ','ઘ','ચ','છ','જ','ઝ','ટ','ઠ','ડ','ઢ','ત','થ','દ','ધ','ન','પ','ફ','બ','ભ','મ','ય','ર','લ','વ','શ','ષ','સ','હ','ઃ',
  'ਅ','ਆ','ਇ','ਈ','ਉ','ਊ','ਏ','ਐ','ਓ','ਔ','ਕ','ਖ','ਗ','ਘ','ਚ','ਛ','ਜ','ਝ','ਟ','ਠ','ਡ','ਢ','ਤ','ਥ','ਦ','ਧ','ਨ','ਪ','ਫ','ਬ','ਭ','ਮ','ਯ','ਰ','ਲ','ਵ','ਸ਼','ਸ','ਹ','ੰ','ਃ',
  'ଅ','ଆ','ଇ','ଈ','ଉ','ଊ','ଏ','ଐ','ଓ','ଔ','କ','ଖ','ଗ','ଘ','ଚ','ଛ','ଜ','ଝ','ଟ','ଠ','ଡ','ଢ','ତ','ଥ','ଦ','ଧ','ନ','ପ','ଫ','ବ','ଭ','ମ','ଯ','ର','ଲ','ଶ','ଷ','ସ','ହ','ଃ',
  'அ','ஆ','இ','ஈ','உ','ஊ','எ','ஏ','ஐ','ஒ','ஓ','ஔ','க்','ச','ஜ','ட','ண','த','ந','ப','ம','ய','ர','ல','வ','ள','ழ','ற','ன',
  'అ','ఆ','ఇ','ఈ','ఉ','ఊ','ఎ','ఏ','ఐ','ఒ','ఓ','ఔ','క','ఖ','గ','ఘ','చ','ఛ','జ','ఝ','ట','ఠ','డ','ఢ','త','థ','ద','ధ','న','ప','ఫ','బ','భ','మ','య','ర','ల','వ','శ','ష','స','హ','ః',
  'ಅ','ಆ','ಇ','ಈ','ಉ','ಊ','ಎ','ಏ','ಐ','ಒ','ಓ','ಔ','ಕ','ಖ','ಗ','ಘ','ಚ','ಛ','ಜ','ಝ','ಟ','ಠ','ಡ','ಢ','ತ','ಥ','ದ','ಧ','ನ','ಪ','ಫ','ಬ','ಭ','ಮ','ಯ','ರ','ಲ','ವ','ಶ','ಷ','ಸ','ಹ','ಃ',
  'അ','ആ','ഇ','ഈ','ഉ','ഊ','എ','ഏ','ഐ','ഒ','ഓ','ഔ','ക','ഖ','ഗ','ഘ','ച','ഛ','ജ','ഝ','ട','ഠ','ഡ','ഢ','ത','ഥ','ദ','ധ','ന','പ','ഫ','ബ','ഭ','മ','യ','ര','ല','വ','ശ','ഷ','സ','ഹ','ഃ',
  'ꯀ','ꯁ','ꯂ','ꯃ','ꯄ','ꯅ','ꯆ','ꯇ','ꯈ','ꯉ','ꯊ','ꯋ','ꯌ','ꯍ','ꯎ','ꯏ','ꯐ','ꯑ','ꯒ','ꯓ',
  'ᱚ','ᱛ','ᱜ','ᱝ','ᱞ','ᱟ','ᱠ','ᱡ','ᱢ','ᱣ','ᱤ','ᱥ','ᱦ','ᱧ','ᱨ','ᱩ','ᱪ','ᱫ','ᱬ','ᱭ','ᱮ','ᱯ','ᱰ','ᱱ','ᱲ','ᱳ','ᱴ','ᱵ','ᱶ','ᱷ',
  'ا','آ','ب','پ','ت','ٹ','ث','ج','چ','ح','خ','د','ڈ','ذ','ر','ڑ','ز','ژ','س','ش','ص','ض','ط','ظ','ع','غ','ف','ق','ک','گ','ل','م','ن','و','ہ','ء','ی','ے'
];

const IndicRainBackdrop: React.FC = () => {
  const [drops, setDrops] = useState<{ id: number; x: number; y: number; char: string; size: number }[]>([]);
  const idRef = useRef(0);

  useEffect(() => {
    const interval = setInterval(() => {
      const id = ++idRef.current;
      const x = Math.random() * 100;
      const y = Math.random() * 100;
      const char = INDIC_CHAR_SET[Math.floor(Math.random() * INDIC_CHAR_SET.length)];
      const size = 12 + Math.random() * 16;
      setDrops((prev) => {
        const next = [...prev, { id, x, y, char, size }];
        if (next.length > 1000) next.shift();
        return next;
      });
      setTimeout(() => {
        setDrops((prev) => prev.filter((d) => d.id !== id));
      }, 4000);
    }, 16); // ~75% more frequent than 28ms
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="absolute inset-0 z-0 pointer-events-none overflow-hidden">
      {drops.map((d) => (
        <motion.span
          key={d.id}
          className="absolute"
          style={{
            left: `${d.x}%`,
            top: `${d.y}%`,
            color: 'rgba(255, 0, 0, 0.475)',
            textShadow: '0 0 60px rgba(255, 0, 0, 0.45)',
            fontSize: `${d.size}px`,
            lineHeight: 1
          }}
          initial={{ opacity: 0, y: -12 }}
          animate={{ opacity: [0, 0.9, 0], y: [-12, 18] }}
          transition={{ duration: 2.75, ease: 'easeInOut' }}
        >
          {d.char}
        </motion.span>
      ))}
    </div>
  );
};

export default IndicRainBackdrop;
